
postgres=> \c postgres test
You are now connected to database "postgres".
postgres=>
postgres=> drop table if exists advise_index;
NOTICE:  table "advise_index" does not exist, skipping
DROP TABLE
postgres=> drop view if exists advise_index;
NOTICE:  view "advise_index" does not exist, skipping
DROP VIEW
postgres=>
postgres=> /* create the advise_index same as provided in the contrib module */;
postgres=> create table advise_index( reloid oid, attrs integer[], profit real,
postgres(>                             index_size integer, backend_pid integer,
postgres(>                             timestamp timestamptz);
CREATE TABLE
postgres=>
postgres=> /* set the client to see the log messages generated by the Adviser */;
postgres=> set client_min_messages to log;
SET
postgres=>
postgres=> /* As expected, the EXPLAIN will work */;
postgres=> explain select * from t where a = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Index Scan using idx_adv_0 on t  (cost=0.00..8.28 rows=1 width=8)
  Index Cond: (a = 100)

                     QUERY PLAN
----------------------------------------------------
 Seq Scan on t  (cost=0.00..1791.00 rows=1 width=8)
   Filter: (a = 100)
(2 rows)

postgres=>
postgres=> select * from advise_index;
 reloid | attrs | profit  | index_size | backend_pid |           timestamp
--------+-------+---------+------------+-------------+-------------------------------
  16395 | {1}   | 1782.72 |       2608 |        5256 | 2007-01-13 13:08:53.593+05:30
(1 row)

postgres=>
postgres=> /* Now lets drop the advise_index and see what ERROR it throws */;
postgres=> drop table if exists advise_index;
DROP TABLE
postgres=> drop view if exists advise_index;
NOTICE:  view "advise_index" does not exist, skipping
DROP VIEW
postgres=>
postgres=> explain select * from t where a = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Index Scan using idx_adv_0 on t  (cost=0.00..8.28 rows=1 width=8)
  Index Cond: (a = 100)

ERROR:  relation "advise_index" does not exist.
DETAIL:  Index Adviser uses "advise_index" table to store it's advisory. You should have INSERT permissions on a table or an (INSERT-able) view named "advise_index". Also, make sure that you are not running the Index Adviser under a read-only transaction.
HINT:  Please create the "advise_index" table using the script provided in pg_advise_index contrib module.
postgres=>
postgres=> /* create another object by the same name (in the same namespace) */;

postgres=> create index advise_index on t1(a);
CREATE INDEX
postgres=>
postgres=> /* advise_index does exist, but its not a table or view! */;
postgres=> explain select * from t where a = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Index Scan using idx_adv_0 on t  (cost=0.00..8.28 rows=1 width=8)
  Index Cond: (a = 100)

ERROR:  "advise_index" is not a table or view.
DETAIL:  Index Adviser uses "advise_index" table to store it's advisory. You should have INSERT permissions on a table or an (INSERT-able) view named "advise_index". Also, make sure that you are not running the Index Adviser under a read-only transaction.
HINT:  Please create the "advise_index" table using the script provided in pg_advise_index contrib module.
postgres=>
postgres=> /* now create a table named advise_index, but with a different signature! */;
postgres=> drop index advise_index;
DROP INDEX
postgres=>
postgres=> create table advise_index(a int);
CREATE TABLE
postgres=>
postgres=> /* This ERROR comes from the executor, but we still see our DETAIL and HINT */;
postgres=> explain select * from t where a = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Index Scan using idx_adv_0 on t  (cost=0.00..8.28 rows=1 width=8)
  Index Cond: (a = 100)

ERROR:  INSERT has more expressions than target columns
DETAIL:  Index Adviser uses "advise_index" table to store it's advisory. You should have INSERT permissions on a table or an (INSERT-able) view named "advise_index". Also, make sure that you are not running the Index Adviser under a read-only transaction.
HINT:  Please create the "advise_index" table using the script provided in pg_advise_index contrib module.
CONTEXT:  SQL statement "insert into "advise_index" values( 16395, array[1], 1782.719482, 2608, 5256, now());"
postgres=>
postgres=> /* create a table with same signature but different name */;
postgres=> drop table if exists advise_index;
DROP TABLE
postgres=> drop view if exists advise_index;
NOTICE:  view "advise_index" does not exist, skipping
DROP VIEW
postgres=>
postgres=> drop table if exists advise_index_data cascade;
NOTICE:  table "advise_index_data" does not exist, skipping
DROP TABLE
postgres=>
postgres=> create table advise_index_data( reloid oid, attrs integer[], profit real,
postgres(>                                 index_size integer, backend_pid integer,
postgres(>                                 timestamp timestamptz);
CREATE TABLE
postgres=>
postgres=> /* and a view on that table */;
postgres=> create view advise_index as select * from advise_index_data;
CREATE VIEW
postgres=>
postgres=> /* now try to insert into the view, and notice the ERROR, DETAIL and HINT from executor */;
postgres=> explain select * from t where a = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Index Scan using idx_adv_0 on t  (cost=0.00..8.28 rows=1 width=8)
  Index Cond: (a = 100)

ERROR:  cannot insert into a view
DETAIL:  Index Adviser uses "advise_index" table to store it's advisory. You should have INSERT permissions on a table or an (INSERT-able) view named "advise_index". Also, make sure that you are not running the Index Adviser under a read-only transaction.
HINT:  Please create the "advise_index" table using the script provided in pg_advise_index contrib module.
CONTEXT:  SQL statement "insert into "advise_index" values( 16395, array[1], 1782.719482, 2608, 5256, now());"
postgres=>
postgres=> /* now create a RULE on the view that redirects the INSERTs into the
table */;
postgres=> create or replace rule advise_index_insert as
postgres-> ON INSERT to advise_index
postgres-> do instead
postgres-> INSERT into advise_index_data values (new.reloid, new.attrs, new.profit,
postgres(>									        new.index_size, new.backend_pid,
postgres(>									        new.timestamp) ;
CREATE RULE
postgres=>
postgres=> /* and voila, (internal) INSERT into the view succeeds! */;
postgres=> explain select * from t where a = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Index Scan using idx_adv_0 on t  (cost=0.00..8.28 rows=1 width=8)
  Index Cond: (a = 100)

                     QUERY PLAN
----------------------------------------------------
 Seq Scan on t  (cost=0.00..1791.00 rows=1 width=8)
   Filter: (a = 100)
(2 rows)

postgres=>
postgres=> /* Now, lets try what happens under a read-only transaction */;
postgres=> begin;
BEGIN
postgres=>
postgres=> set transaction_read_only=t;
SET
postgres=>
postgres=> show transaction_read_only;
 transaction_read_only
-----------------------
 on
(1 row)

postgres=>
postgres=> explain select * from t where a = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Index Scan using idx_adv_0 on t  (cost=0.00..8.28 rows=1 width=8)
  Index Cond: (a = 100)

ERROR:  transaction is read-only
DETAIL:  Index Adviser uses "advise_index" table to store it's advisory. You should have INSERT permissions on a table or an (INSERT-able) view named "advise_index". Also, make sure that you are not running the Index Adviser under a read-only transaction.
HINT:  Please create the "advise_index" table using the script provided in pg_advise_index contrib module.
CONTEXT:  SQL statement "insert into "advise_index" values( 16395, array[1], 1782.719482, 2608, 5256, now());"
postgres=>
postgres=> end;
ROLLBACK
postgres=>
postgres=> select * from advise_index;
 reloid | attrs | profit  | index_size | backend_pid |          timestamp
--------+-------+---------+------------+-------------+------------------------------
  16395 | {1}   | 1782.72 |       2608 |        5256 | 2007-01-13 13:08:54.25+05:30
(1 row)

postgres=>
postgres=> select * from advise_index_data;
 reloid | attrs | profit  | index_size | backend_pid |          timestamp
--------+-------+---------+------------+-------------+------------------------------
  16395 | {1}   | 1782.72 |       2608 |        5256 | 2007-01-13 13:08:54.25+05:30
(1 row)

postgres=>
