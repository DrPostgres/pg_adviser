
Welcome to psql 8.2.1, the PostgreSQL interactive terminal.

Type:  \copyright for distribution terms
       \h for help with SQL commands
       \? for help with psql commands
       \g or terminate with semicolon to execute query
       \q to quit

Warning: Console code page (437) differs from Windows code page (1252)
         8-bit characters may not work correctly. See psql reference
         page "Notes for Windows users" for details.

postgres=# /*
postgres*# You must start the session with something like:
postgres*#
postgres*# env PGOPTIONS='-c local_preload_libraries=libpg_index_adviser' psql postgres
postgres*# */;
postgres=#
postgres=# create language plpgsql;
CREATE LANGUAGE
postgres=#
postgres=# drop schema if exists test cascade;
NOTICE:  schema "test" does not exist, skipping
DROP SCHEMA
postgres=#
postgres=# drop user if exists test;
NOTICE:  role "test" does not exist, skipping
DROP ROLE
postgres=#
postgres=# create user test;
CREATE ROLE
postgres=#
postgres=# create schema test authorization test;
CREATE SCHEMA
postgres=#
postgres=# \c postgres test
You are now connected to database "postgres" as user "test".
postgres=>
postgres=> drop table if exists advise_index;
NOTICE:  table "advise_index" does not exist, skipping
DROP TABLE
postgres=>
postgres=> \i contrib/pg_index_adviser/advise_index.create.sql
CREATE TABLE
postgres=>
postgres=> \d advise_index;
             Table "test.advise_index"
   Column    |           Type           | Modifiers
-------------+--------------------------+-----------
 reloid      | oid                      |
 attrs       | integer[]                |
 benefit     | real                     |
 index_size  | integer                  |
 backend_pid | integer                  |
 timestamp   | timestamp with time zone |

postgres=>
postgres=> \i contrib/pg_index_adviser/advise_index_show.create.sql
CREATE FUNCTION
postgres=>
postgres=> select * from advise_index;
 reloid | attrs | benefit | index_size | backend_pid | timestamp
--------+-------+---------+------------+-------------+-----------
(0 rows)

postgres=>
postgres=> drop table if exists t, t1;
NOTICE:  table "t" does not exist, skipping
NOTICE:  table "t1" does not exist, skipping
DROP TABLE
postgres=>
postgres=> create table t( a int, b int );
CREATE TABLE
postgres=>
postgres=> insert into t select s, 99999-s from generate_series(0,99999) as s;
INSERT 0 100000
postgres=>
postgres=> analyze t;
ANALYZE
postgres=>
postgres=> create table t1 as select * from t;
SELECT
postgres=>
postgres=> /* notice no ANALYZE for T1 */;
postgres=>
postgres=> select count(*) from t;
 count
--------
 100000
(1 row)

postgres=>
postgres=> select count(*) from t1;
 count
--------
 100000
(1 row)

postgres=>
postgres=> /* stop here if you wish to run only pg_advise_index tool */;
postgres=>
postgres=> -- set enable_advise_index to true;
postgres=> /* set the client to see the log messages generated by the Adviser */
;
postgres=> set client_min_messages to log;
SET
postgres=>
postgres=> explain select * from t where a = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Index Scan using idx_adv_0 on t  (cost=0.00..8.28 rows=1 width=8)
  Index Cond: (a = 100)

                     QUERY PLAN
----------------------------------------------------
 Seq Scan on t  (cost=0.00..1791.00 rows=1 width=8)
   Filter: (a = 100)
(2 rows)

postgres=>
postgres=> explain select * from t where b = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Index Scan using idx_adv_0 on t  (cost=0.00..8.28 rows=1 width=8)
  Index Cond: (b = 100)

                     QUERY PLAN
----------------------------------------------------
 Seq Scan on t  (cost=0.00..1791.00 rows=1 width=8)
   Filter: (b = 100)
(2 rows)

postgres=>
postgres=> explain select * from t where a = 100 and b = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Index Scan using idx_adv_1 on t  (cost=0.00..8.28 rows=1 width=8)
  Index Cond: (b = 100)
  Filter: (a = 100)

                     QUERY PLAN
----------------------------------------------------
 Seq Scan on t  (cost=0.00..2041.00 rows=1 width=8)
   Filter: ((a = 100) AND (b = 100))
(2 rows)

postgres=>
postgres=> explain select * from t where a = 100 or b = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Bitmap Heap Scan on t  (cost=8.54..16.21 rows=2 width=8)
  Recheck Cond: ((a = 100) OR (b = 100))
  ->  BitmapOr  (cost=8.54..8.54 rows=2 width=0)
        ->  Bitmap Index Scan on idx_adv_0  (cost=0.00..4.27 rows=1 width=0)
              Index Cond: (a = 100)
        ->  Bitmap Index Scan on idx_adv_1  (cost=0.00..4.27 rows=1 width=0)
              Index Cond: (b = 100)

                     QUERY PLAN
----------------------------------------------------
 Seq Scan on t  (cost=0.00..2041.00 rows=2 width=8)
   Filter: ((a = 100) OR (b = 100))
(2 rows)

postgres=>
postgres=> /* now we shall test with T1 */;
postgres=>
postgres=> explain select * from t1 where a = 100;
                      QUERY PLAN
-------------------------------------------------------
 Seq Scan on t1  (cost=0.00..1852.93 rows=525 width=8)
   Filter: (a = 100)
(2 rows)

postgres=>
postgres=> explain select * from t1 where b = 100;
                      QUERY PLAN
-------------------------------------------------------
 Seq Scan on t1  (cost=0.00..1852.93 rows=525 width=8)
   Filter: (b = 100)
(2 rows)

postgres=>
postgres=> explain select * from t1 where a = 100 and b = 100;
                     QUERY PLAN
-----------------------------------------------------
 Seq Scan on t1  (cost=0.00..2115.31 rows=3 width=8)
   Filter: ((a = 100) AND (b = 100))
(2 rows)

postgres=>
postgres=> explain select * from t1 where a = 100 or b = 100;
                       QUERY PLAN
--------------------------------------------------------
 Seq Scan on t1  (cost=0.00..2115.31 rows=1047 width=8)
   Filter: ((a = 100) OR (b = 100))
(2 rows)

postgres=>
postgres=> /* let's do some sensible join over these two tables */;
postgres=> explain
postgres-> select       *
postgres-> from t,
postgres->              t1
postgres-> where        t.a = 100
postgres-> and          t1.a = 100
postgres->      or t.b = 100
postgres->              and t1.b = 100;
LOG:  Index Adviser: Plan using estimates for suggested indexes:

Nested Loop  (cost=8.54..7395.45 rows=1050 width=16)
  Join Filter: (((t.a = 100) AND (t1.a = 100)) OR ((t.b = 100) AND (t1.b = 100)))
  ->  Bitmap Heap Scan on t  (cost=8.54..16.21 rows=2 width=8)
        Recheck Cond: ((a = 100) OR (b = 100))
        ->  BitmapOr  (cost=8.54..8.54 rows=2 width=0)
              ->  Bitmap Index Scan on idx_adv_0  (cost=0.00..4.27 rows=1 width=0)
                    Index Cond: (a = 100)
              ->  Bitmap Index Scan on idx_adv_1  (cost=0.00..4.27 rows=1 width=0)
                    Index Cond: (b = 100)
  ->  Seq Scan on t1  (cost=0.00..1590.54 rows=104954 width=8)

                                    QUERY PLAN
-----------------------------------------------------------------------------------
 Nested Loop  (cost=0.00..368963541.00 rows=1050 width=16)
   Join Filter: (((t.a = 100) AND (t1.a = 100)) OR ((t.b = 100) AND (t1.b = 100)))
   ->  Seq Scan on t  (cost=0.00..1541.00 rows=100000 width=8)
   ->  Seq Scan on t1  (cost=0.00..1590.54 rows=104954 width=8)
(4 rows)

postgres=>
postgres=> /* following are the contents of the advise_index table */;
postgres=> select * from advise_index;
 reloid | attrs |    benefit   | index_size | backend_pid |           timestamp
--------+-------+--------------+------------+-------------+-------------------------------
  16395 | {1}   |      1782.72 |       2608 |        2272 | 2007-01-13 12:30:02.39+05:30
  16395 | {2}   |      1782.72 |       2608 |        2272 | 2007-01-13 12:30:02.531+05:30
  16395 | {2}   |      2032.72 |       2608 |        2272 | 2007-01-13 12:30:02.578+05:30
  16395 | {1}   |       1012.4 |       2608 |        2272 | 2007-01-13 12:30:02.64+05:30
  16395 | {2}   |       1012.4 |       2608 |        2272 | 2007-01-13 12:30:02.64+05:30
  16395 | {1}   | 1.84478e+008 |       2608 |        2272 | 2007-01-13 12:30:17.984+05:30
  16395 | {2}   | 1.84478e+008 |       2608 |        2272 | 2007-01-13 12:30:17.984+05:30
(7 rows)

postgres=>
postgres=> /* And following is the summary of the advices generated */;
postgres=>
postgres=> select       E'backend_pid\n'
postgres->              ||      E'===========\n'
postgres->              ||      backend_pid,
postgres->              advise_index_show( backend_pid )
postgres-> from (select distinct backend_pid
postgres(>              from    advise_index as adv
postgres(>              where   adv.reloid in   (select oid
postgres(>                                       from pg_class
postgres(>                                       where relkind = 'r')
postgres(>      ) as v;
  ?column?   |                         advise_index_show
-------------+--------------------------------------------------------------------
 backend_pid | /* Index Adviser */
 =========== : /* ============= */
 2272        :
             : /* size: 2608 KB, benefit: 1.84483e+008, gain: 70737.3067484663 */
             : create index idx_t_b on t(b);
             :
             : /* size: 2608 KB, benefit: 1.84481e+008, gain: 70736.527607362 */
             : create index idx_t_a on t(a);
             :
(1 row)

postgres=>
